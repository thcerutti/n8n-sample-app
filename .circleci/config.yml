version: 2.1

# Define orbs (conjuntos reutiliz√°veis de configura√ß√£o)
orbs:
  node: circleci/node@5.1.0
  docker: circleci/docker@2.2.0

# Define workflows
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - test
      - build-docker:
          requires:
            - test
          filters:
            branches:
              only:
                - main
                - develop
      - deploy:
          requires:
            - build-docker
          filters:
            branches:
              only: main

# Define jobs
jobs:
  test:
    docker:
      - image: cimg/node:18.17
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Criar diret√≥rio de logs de teste
          command: mkdir -p ~/test-results
      - run:
          name: Executar testes
          command: |
            # Verificar sintaxe do c√≥digo
            node -c server.js
            echo "‚úÖ Sintaxe JavaScript v√°lida!"

            # Iniciar servidor em background
            npm start &
            SERVER_PID=$!

            # Aguardar servidor inicializar
            sleep 5

            # Testar endpoint
            RESPONSE=$(curl -s http://localhost:3000/home)
            echo "Resposta recebida: $RESPONSE"

            # Verificar se a resposta cont√©m "hello world"
            if echo "$RESPONSE" | grep -q "hello world"; then
              echo "‚úÖ Endpoint /home retornou resposta correta!"
            else
              echo "‚ùå Resposta inesperada do endpoint"
              kill $SERVER_PID
              exit 1
            fi

            # Parar servidor
            kill $SERVER_PID
            echo "‚úÖ Todos os testes passaram!"
      - run:
          name: Verificar sintaxe JavaScript
          command: npm run lint
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results

  build-docker:
    executor: docker/docker
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Construir imagem Docker
          command: |
            docker build -t $CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1 .
            docker build -t $CIRCLE_PROJECT_REPONAME:latest .
      - run:
          name: Testar imagem Docker
          command: |
            # Executar container para teste
            docker run -d --name test-container -p 3000:3000 $CIRCLE_PROJECT_REPONAME:latest

            # Aguardar container inicializar
            sleep 10

            # Testar endpoint
            docker exec test-container wget --spider --quiet http://localhost:3000/home

            # Limpar
            docker stop test-container
            docker rm test-container

            echo "‚úÖ Imagem Docker testada com sucesso!"
      - run:
          name: Salvar imagem Docker
          command: |
            mkdir -p ~/docker-images
            docker save -o ~/docker-images/app.tar $CIRCLE_PROJECT_REPONAME:latest
      - persist_to_workspace:
          root: ~/
          paths:
            - docker-images

  deploy:
    executor: docker/docker
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - setup_remote_docker
      - run:
          name: Carregar imagem Docker
          command: |
            docker load -i ~/docker-images/app.tar
      - run:
          name: Login no Docker Hub (opcional)
          command: |
            # Descomente e configure as vari√°veis de ambiente no CircleCI para fazer push para Docker Hub
            # echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            echo "Login no Docker Hub desabilitado. Configure DOCKER_USERNAME e DOCKER_PASSWORD no CircleCI para habilitar."
      - run:
          name: Push da imagem (opcional)
          command: |
            # Descomente para fazer push para Docker Hub
            # docker tag $CIRCLE_PROJECT_REPONAME:latest $DOCKER_USERNAME/$CIRCLE_PROJECT_REPONAME:latest
            # docker tag $CIRCLE_PROJECT_REPONAME:latest $DOCKER_USERNAME/$CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1
            # docker push $DOCKER_USERNAME/$CIRCLE_PROJECT_REPONAME:latest
            # docker push $DOCKER_USERNAME/$CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1
            echo "Push para Docker Hub desabilitado. Descomente as linhas acima para habilitar."
      - run:
          name: Deploy (simulado)
          command: |
            echo "üöÄ Deploy realizado com sucesso!"
            echo "Commit: $CIRCLE_SHA1"
            echo "Branch: $CIRCLE_BRANCH"
            echo "Projeto: $CIRCLE_PROJECT_REPONAME"

            # Aqui voc√™ pode adicionar comandos reais de deploy:
            # - Deploy para servidor
            # - Atualiza√ß√£o de containers em produ√ß√£o
            # - Notifica√ß√µes para Slack/Discord
            # - Etc.
